; Listing generated by Microsoft (R) Optimizing Compiler Version 19.25.28612.0 

	TITLE	C:\Users\user\source\repos\libdeflate_optimize\libdeflate_optimize\main.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_SIZE_ARR
PUBLIC	_LEVEL
msvcjmc	SEGMENT
__7242C389_ctype@h DB 01H
__90A1F774_basetsd@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__AF541008_winnt@h DB 01H
__0D001789_processthreadsapi@h DB 01H
__F972325D_memoryapi@h DB 01H
__76CD430D_winerror@h DB 01H
__737D49DB_winbase@h DB 01H
__376EBCA0_winioctl@h DB 01H
__0396F1A5_stralign@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__BB2958E3_main@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_SIZE_ARR DD	0aH
_LEVEL	DD	01H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BI@KOAKMCPF@real?5size?3?5?$CFd?6time?3?5?$CFd?6@ ; `string'
PUBLIC	??_C@_06ODEGECMA@EQUAL?6@			; `string'
PUBLIC	??_C@_0L@CIOKDALK@NOT?5EQUAL?6@			; `string'
EXTRN	_libdeflate_alloc_compressor@4:PROC
EXTRN	_libdeflate_deflate_compress@20:PROC
EXTRN	_libdeflate_free_compressor@4:PROC
EXTRN	_libdeflate_alloc_decompressor@0:PROC
EXTRN	_libdeflate_deflate_decompress@24:PROC
EXTRN	_libdeflate_free_decompressor@4:PROC
EXTRN	_memcmp:PROC
EXTRN	__imp__GetTickCount@0:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	_compress_slava:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0L@CIOKDALK@NOT?5EQUAL?6@
CONST	SEGMENT
??_C@_0L@CIOKDALK@NOT?5EQUAL?6@ DB 'NOT EQUAL', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODEGECMA@EQUAL?6@
CONST	SEGMENT
??_C@_06ODEGECMA@EQUAL?6@ DB 'EQUAL', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KOAKMCPF@real?5size?3?5?$CFd?6time?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0BI@KOAKMCPF@real?5size?3?5?$CFd?6time?3?5?$CFd?6@ DB 'real size: %'
	DB	'd', 0aH, 'time: %d', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\user\source\repos\libdeflate_optimize\libdeflate_optimize\main.c
;	COMDAT _main
_TEXT	SEGMENT
tv82 = -332						; size = 4
_res$1 = -132						; size = 4
_uncompressed_size$2 = -120				; size = 4
_decompr$3 = -108					; size = 4
_real_size$4 = -96					; size = 4
_start$5 = -84						; size = 4
_end$6 = -72						; size = 4
_compr$ = -60						; size = 4
_i$7 = -48						; size = 4
_uncompressed_buffer$ = -36				; size = 4
_buffer$ = -24						; size = 4
_source$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 4c 01 00
	00		 sub	 esp, 332		; 0000014cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd b4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-332]
  00012	b9 53 00 00 00	 mov	 ecx, 83			; 00000053H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __BB2958E3_main@c
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 14   : 	uint8_t* source = (uint8_t*)malloc(3 * SIZE_ARR),

  00032	33 c9		 xor	 ecx, ecx
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR _SIZE_ARR
  00039	ba 03 00 00 00	 mov	 edx, 3
  0003e	f7 e2		 mul	 edx
  00040	0f 90 c1	 seto	 cl
  00043	f7 d9		 neg	 ecx
  00045	0b c8		 or	 ecx, eax
  00047	8b f4		 mov	 esi, esp
  00049	51		 push	 ecx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00050	83 c4 04	 add	 esp, 4
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	89 45 f4	 mov	 DWORD PTR _source$[ebp], eax

; 15   : 		* buffer = source + SIZE_ARR,

  0005d	8b 45 f4	 mov	 eax, DWORD PTR _source$[ebp]
  00060	03 05 00 00 00
	00		 add	 eax, DWORD PTR _SIZE_ARR
  00066	89 45 e8	 mov	 DWORD PTR _buffer$[ebp], eax

; 16   : 		* uncompressed_buffer = buffer + SIZE_ARR;

  00069	8b 45 e8	 mov	 eax, DWORD PTR _buffer$[ebp]
  0006c	03 05 00 00 00
	00		 add	 eax, DWORD PTR _SIZE_ARR
  00072	89 45 dc	 mov	 DWORD PTR _uncompressed_buffer$[ebp], eax

; 17   : 	for (int i = 0; i < SIZE_ARR; i++)

  00075	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$7[ebp], 0
  0007c	eb 09		 jmp	 SHORT $LN4@main
$LN2@main:
  0007e	8b 45 d0	 mov	 eax, DWORD PTR _i$7[ebp]
  00081	83 c0 01	 add	 eax, 1
  00084	89 45 d0	 mov	 DWORD PTR _i$7[ebp], eax
$LN4@main:
  00087	8b 45 d0	 mov	 eax, DWORD PTR _i$7[ebp]
  0008a	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _SIZE_ARR
  00090	7d 3a		 jge	 SHORT $LN3@main

; 18   : 		source[i] = i%256?i:1;

  00092	8b 45 d0	 mov	 eax, DWORD PTR _i$7[ebp]
  00095	25 ff 00 00 80	 and	 eax, -2147483393	; 800000ffH
  0009a	79 07		 jns	 SHORT $LN16@main
  0009c	48		 dec	 eax
  0009d	0d 00 ff ff ff	 or	 eax, -256		; ffffff00H
  000a2	40		 inc	 eax
$LN16@main:
  000a3	85 c0		 test	 eax, eax
  000a5	74 0b		 je	 SHORT $LN11@main
  000a7	8b 4d d0	 mov	 ecx, DWORD PTR _i$7[ebp]
  000aa	89 8d b4 fe ff
	ff		 mov	 DWORD PTR tv82[ebp], ecx
  000b0	eb 0a		 jmp	 SHORT $LN12@main
$LN11@main:
  000b2	c7 85 b4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv82[ebp], 1
$LN12@main:
  000bc	8b 55 f4	 mov	 edx, DWORD PTR _source$[ebp]
  000bf	03 55 d0	 add	 edx, DWORD PTR _i$7[ebp]
  000c2	8a 85 b4 fe ff
	ff		 mov	 al, BYTE PTR tv82[ebp]
  000c8	88 02		 mov	 BYTE PTR [edx], al
  000ca	eb b2		 jmp	 SHORT $LN2@main
$LN3@main:

; 19   : 	
; 20   : 	if (!source) return 1;

  000cc	83 7d f4 00	 cmp	 DWORD PTR _source$[ebp], 0
  000d0	75 0a		 jne	 SHORT $LN5@main
  000d2	b8 01 00 00 00	 mov	 eax, 1
  000d7	e9 78 01 00 00	 jmp	 $LN1@main
$LN5@main:

; 21   : 	struct libdeflate_compressor* compr = libdeflate_alloc_compressor(LEVEL);

  000dc	a1 00 00 00 00	 mov	 eax, DWORD PTR _LEVEL
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 _libdeflate_alloc_compressor@4
  000e7	89 45 c4	 mov	 DWORD PTR _compr$[ebp], eax

; 22   : 	if (compr) {

  000ea	83 7d c4 00	 cmp	 DWORD PTR _compr$[ebp], 0
  000ee	0f 84 48 01 00
	00		 je	 $LN6@main

; 23   : 		DWORD end, start = GetTickCount();

  000f4	8b f4		 mov	 esi, esp
  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  000fc	3b f4		 cmp	 esi, esp
  000fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00103	89 45 ac	 mov	 DWORD PTR _start$5[ebp], eax

; 24   : 		int real_size = libdeflate_deflate_compress(compr, source, SIZE_ARR, buffer, SIZE_ARR);

  00106	a1 00 00 00 00	 mov	 eax, DWORD PTR _SIZE_ARR
  0010b	50		 push	 eax
  0010c	8b 4d e8	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0010f	51		 push	 ecx
  00110	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SIZE_ARR
  00116	52		 push	 edx
  00117	8b 45 f4	 mov	 eax, DWORD PTR _source$[ebp]
  0011a	50		 push	 eax
  0011b	8b 4d c4	 mov	 ecx, DWORD PTR _compr$[ebp]
  0011e	51		 push	 ecx
  0011f	e8 00 00 00 00	 call	 _libdeflate_deflate_compress@20
  00124	89 45 a0	 mov	 DWORD PTR _real_size$4[ebp], eax

; 25   : 		end = GetTickCount();

  00127	8b f4		 mov	 esi, esp
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0012f	3b f4		 cmp	 esi, esp
  00131	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00136	89 45 b8	 mov	 DWORD PTR _end$6[ebp], eax

; 26   : 		printf("real size: %d\ntime: %d\n", real_size, end - start);

  00139	8b 45 b8	 mov	 eax, DWORD PTR _end$6[ebp]
  0013c	2b 45 ac	 sub	 eax, DWORD PTR _start$5[ebp]
  0013f	50		 push	 eax
  00140	8b 4d a0	 mov	 ecx, DWORD PTR _real_size$4[ebp]
  00143	51		 push	 ecx
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KOAKMCPF@real?5size?3?5?$CFd?6time?3?5?$CFd?6@
  00149	e8 00 00 00 00	 call	 _printf
  0014e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 27   : 		start = GetTickCount();

  00151	8b f4		 mov	 esi, esp
  00153	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00159	3b f4		 cmp	 esi, esp
  0015b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00160	89 45 ac	 mov	 DWORD PTR _start$5[ebp], eax

; 28   : 		real_size = compress_slava(compr, source, SIZE_ARR, buffer, SIZE_ARR);

  00163	a1 00 00 00 00	 mov	 eax, DWORD PTR _SIZE_ARR
  00168	50		 push	 eax
  00169	8b 4d e8	 mov	 ecx, DWORD PTR _buffer$[ebp]
  0016c	51		 push	 ecx
  0016d	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _SIZE_ARR
  00173	52		 push	 edx
  00174	8b 45 f4	 mov	 eax, DWORD PTR _source$[ebp]
  00177	50		 push	 eax
  00178	8b 4d c4	 mov	 ecx, DWORD PTR _compr$[ebp]
  0017b	51		 push	 ecx
  0017c	e8 00 00 00 00	 call	 _compress_slava
  00181	83 c4 14	 add	 esp, 20			; 00000014H
  00184	89 45 a0	 mov	 DWORD PTR _real_size$4[ebp], eax

; 29   : 		end = GetTickCount();

  00187	8b f4		 mov	 esi, esp
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  0018f	3b f4		 cmp	 esi, esp
  00191	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00196	89 45 b8	 mov	 DWORD PTR _end$6[ebp], eax

; 30   : 		printf("real size: %d\ntime: %d\n", real_size, end - start);

  00199	8b 45 b8	 mov	 eax, DWORD PTR _end$6[ebp]
  0019c	2b 45 ac	 sub	 eax, DWORD PTR _start$5[ebp]
  0019f	50		 push	 eax
  001a0	8b 4d a0	 mov	 ecx, DWORD PTR _real_size$4[ebp]
  001a3	51		 push	 ecx
  001a4	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KOAKMCPF@real?5size?3?5?$CFd?6time?3?5?$CFd?6@
  001a9	e8 00 00 00 00	 call	 _printf
  001ae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 31   : 		libdeflate_free_compressor(compr);

  001b1	8b 45 c4	 mov	 eax, DWORD PTR _compr$[ebp]
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 _libdeflate_free_compressor@4

; 32   : 		if (real_size) {

  001ba	83 7d a0 00	 cmp	 DWORD PTR _real_size$4[ebp], 0
  001be	74 7c		 je	 SHORT $LN6@main

; 33   : 			struct libdeflate_decompressor* decompr = libdeflate_alloc_decompressor();

  001c0	e8 00 00 00 00	 call	 _libdeflate_alloc_decompressor@0
  001c5	89 45 94	 mov	 DWORD PTR _decompr$3[ebp], eax

; 34   : 			if (decompr) {

  001c8	83 7d 94 00	 cmp	 DWORD PTR _decompr$3[ebp], 0
  001cc	74 6e		 je	 SHORT $LN6@main

; 35   : 				size_t uncompressed_size;
; 36   : 				enum libdeflate_result res = libdeflate_deflate_decompress(decompr, buffer, real_size, uncompressed_buffer, SIZE_ARR, &uncompressed_size);

  001ce	8d 45 88	 lea	 eax, DWORD PTR _uncompressed_size$2[ebp]
  001d1	50		 push	 eax
  001d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _SIZE_ARR
  001d8	51		 push	 ecx
  001d9	8b 55 dc	 mov	 edx, DWORD PTR _uncompressed_buffer$[ebp]
  001dc	52		 push	 edx
  001dd	8b 45 a0	 mov	 eax, DWORD PTR _real_size$4[ebp]
  001e0	50		 push	 eax
  001e1	8b 4d e8	 mov	 ecx, DWORD PTR _buffer$[ebp]
  001e4	51		 push	 ecx
  001e5	8b 55 94	 mov	 edx, DWORD PTR _decompr$3[ebp]
  001e8	52		 push	 edx
  001e9	e8 00 00 00 00	 call	 _libdeflate_deflate_decompress@24
  001ee	89 85 7c ff ff
	ff		 mov	 DWORD PTR _res$1[ebp], eax

; 37   :  				
; 38   : 				libdeflate_free_decompressor(decompr);

  001f4	8b 45 94	 mov	 eax, DWORD PTR _decompr$3[ebp]
  001f7	50		 push	 eax
  001f8	e8 00 00 00 00	 call	 _libdeflate_free_decompressor@4

; 39   : 				if (uncompressed_size == SIZE_ARR && !memcmp(source, uncompressed_buffer, SIZE_ARR)) printf("EQUAL\n");

  001fd	8b 45 88	 mov	 eax, DWORD PTR _uncompressed_size$2[ebp]
  00200	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _SIZE_ARR
  00206	75 27		 jne	 SHORT $LN9@main
  00208	a1 00 00 00 00	 mov	 eax, DWORD PTR _SIZE_ARR
  0020d	50		 push	 eax
  0020e	8b 4d dc	 mov	 ecx, DWORD PTR _uncompressed_buffer$[ebp]
  00211	51		 push	 ecx
  00212	8b 55 f4	 mov	 edx, DWORD PTR _source$[ebp]
  00215	52		 push	 edx
  00216	e8 00 00 00 00	 call	 _memcmp
  0021b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021e	85 c0		 test	 eax, eax
  00220	75 0d		 jne	 SHORT $LN9@main
  00222	68 00 00 00 00	 push	 OFFSET ??_C@_06ODEGECMA@EQUAL?6@
  00227	e8 00 00 00 00	 call	 _printf
  0022c	83 c4 04	 add	 esp, 4
$LN9@main:

; 40   : 				printf("NOT EQUAL\n");

  0022f	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CIOKDALK@NOT?5EQUAL?6@
  00234	e8 00 00 00 00	 call	 _printf
  00239	83 c4 04	 add	 esp, 4
$LN6@main:

; 41   : 			}
; 42   : 		}
; 43   : 	}
; 44   : 	free(source);

  0023c	8b f4		 mov	 esi, esp
  0023e	8b 45 f4	 mov	 eax, DWORD PTR _source$[ebp]
  00241	50		 push	 eax
  00242	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00248	83 c4 04	 add	 esp, 4
  0024b	3b f4		 cmp	 esi, esp
  0024d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 45   : 	return 0;

  00252	33 c0		 xor	 eax, eax
$LN1@main:

; 46   : }

  00254	52		 push	 edx
  00255	8b cd		 mov	 ecx, ebp
  00257	50		 push	 eax
  00258	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@main
  0025e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00263	58		 pop	 eax
  00264	5a		 pop	 edx
  00265	5f		 pop	 edi
  00266	5e		 pop	 esi
  00267	5b		 pop	 ebx
  00268	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026b	33 cd		 xor	 ecx, ebp
  0026d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00272	81 c4 4c 01 00
	00		 add	 esp, 332		; 0000014cH
  00278	3b ec		 cmp	 ebp, esp
  0027a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0027f	8b e5		 mov	 esp, ebp
  00281	5d		 pop	 ebp
  00282	c3		 ret	 0
  00283	90		 npad	 1
$LN15@main:
  00284	01 00 00 00	 DD	 1
  00288	00 00 00 00	 DD	 $LN14@main
$LN14@main:
  0028c	88 ff ff ff	 DD	 -120			; ffffff88H
  00290	04 00 00 00	 DD	 4
  00294	00 00 00 00	 DD	 $LN13@main
$LN13@main:
  00298	75		 DB	 117			; 00000075H
  00299	6e		 DB	 110			; 0000006eH
  0029a	63		 DB	 99			; 00000063H
  0029b	6f		 DB	 111			; 0000006fH
  0029c	6d		 DB	 109			; 0000006dH
  0029d	70		 DB	 112			; 00000070H
  0029e	72		 DB	 114			; 00000072H
  0029f	65		 DB	 101			; 00000065H
  002a0	73		 DB	 115			; 00000073H
  002a1	73		 DB	 115			; 00000073H
  002a2	65		 DB	 101			; 00000065H
  002a3	64		 DB	 100			; 00000064H
  002a4	5f		 DB	 95			; 0000005fH
  002a5	73		 DB	 115			; 00000073H
  002a6	69		 DB	 105			; 00000069H
  002a7	7a		 DB	 122			; 0000007aH
  002a8	65		 DB	 101			; 00000065H
  002a9	00		 DB	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END

; Listing generated by Microsoft (R) Optimizing Compiler Version 19.25.28612.0 

	TITLE	C:\Users\user\source\repos\libdeflate_optimize\libdeflate_optimize\libdeflate2\lib\aligned_malloc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__561309A6_compiler_msc@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__7CC618A3_common_defs@h DB 01H
__D4F4BC07_aligned_malloc@c DB 01H
msvcjmc	ENDS
PUBLIC	__libdeflate_aligned_malloc
PUBLIC	__libdeflate_aligned_free
PUBLIC	__JustMyCode_Default
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\user\source\repos\libdeflate_optimize\libdeflate_optimize\libdeflate2\lib\aligned_malloc.c
;	COMDAT __libdeflate_aligned_free
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
__libdeflate_aligned_free PROC				; COMDAT

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D4F4BC07_aligned_malloc@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 55   : 	if (ptr)

  00028	83 7d 08 00	 cmp	 DWORD PTR _ptr$[ebp], 0
  0002c	74 21		 je	 SHORT $LN1@libdeflate

; 56   : 		free(((void **)ptr)[-1]);

  0002e	b8 04 00 00 00	 mov	 eax, 4
  00033	6b c8 ff	 imul	 ecx, eax, -1
  00036	8b f4		 mov	 esi, esp
  00038	8b 55 08	 mov	 edx, DWORD PTR _ptr$[ebp]
  0003b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0003e	50		 push	 eax
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00045	83 c4 04	 add	 esp, 4
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@libdeflate:

; 57   : }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
__libdeflate_aligned_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\user\source\repos\libdeflate_optimize\libdeflate_optimize\libdeflate2\lib\aligned_malloc.c
;	COMDAT __libdeflate_aligned_malloc
_TEXT	SEGMENT
_orig_ptr$1 = -20					; size = 4
_ptr$ = -8						; size = 4
_alignment$ = 8						; size = 4
_size$ = 12						; size = 4
__libdeflate_aligned_malloc PROC			; COMDAT

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __D4F4BC07_aligned_malloc@c
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 43   : 	void *ptr = malloc(sizeof(void *) + alignment - 1 + size);

  00028	8b 45 08	 mov	 eax, DWORD PTR _alignment$[ebp]
  0002b	83 c0 03	 add	 eax, 3
  0002e	33 c9		 xor	 ecx, ecx
  00030	03 45 0c	 add	 eax, DWORD PTR _size$[ebp]
  00033	0f 92 c1	 setb	 cl
  00036	f7 d9		 neg	 ecx
  00038	0b c8		 or	 ecx, eax
  0003a	8b f4		 mov	 esi, esp
  0003c	51		 push	 ecx
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00043	83 c4 04	 add	 esp, 4
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	89 45 f8	 mov	 DWORD PTR _ptr$[ebp], eax

; 44   : 	if (ptr) {

  00050	83 7d f8 00	 cmp	 DWORD PTR _ptr$[ebp], 0
  00054	74 2e		 je	 SHORT $LN2@libdeflate

; 45   : 		void *orig_ptr = ptr;

  00056	8b 45 f8	 mov	 eax, DWORD PTR _ptr$[ebp]
  00059	89 45 ec	 mov	 DWORD PTR _orig_ptr$1[ebp], eax

; 46   : 		ptr = (void *)ALIGN((uintptr_t)ptr + sizeof(void *), alignment);

  0005c	8b 45 08	 mov	 eax, DWORD PTR _alignment$[ebp]
  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00062	8d 54 01 03	 lea	 edx, DWORD PTR [ecx+eax+3]
  00066	8b 45 08	 mov	 eax, DWORD PTR _alignment$[ebp]
  00069	83 e8 01	 sub	 eax, 1
  0006c	f7 d0		 not	 eax
  0006e	23 d0		 and	 edx, eax
  00070	89 55 f8	 mov	 DWORD PTR _ptr$[ebp], edx

; 47   : 		((void **)ptr)[-1] = orig_ptr;

  00073	b8 04 00 00 00	 mov	 eax, 4
  00078	6b c8 ff	 imul	 ecx, eax, -1
  0007b	8b 55 f8	 mov	 edx, DWORD PTR _ptr$[ebp]
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _orig_ptr$1[ebp]
  00081	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
$LN2@libdeflate:

; 48   : 	}
; 49   : 	return ptr;

  00084	8b 45 f8	 mov	 eax, DWORD PTR _ptr$[ebp]

; 50   : }

  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
__libdeflate_aligned_malloc ENDP
_TEXT	ENDS
END
